version: '3.9'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: job_copilot_db
    environment:
      POSTGRES_DB: job_copilot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - job_copilot_network

  # Redis for caching and state management
  redis:
    image: redis:7-alpine
    container_name: job_copilot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - job_copilot_network

  # FastAPI Backend Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: job_copilot_api
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/job_copilot
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 10
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_MAX_CONNECTIONS: 50
      
      # OpenAI (set your key in .env or here)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-your-openai-key-here}
      OPENAI_MODEL: gpt-4o
      OPENAI_EMBEDDING_MODEL: text-embedding-3-small
      
      # Anthropic (set your key in .env or here)
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-your-anthropic-key-here}
      ANTHROPIC_MODEL: claude-3-5-sonnet-20241022
      
      # Application
      APP_ENV: development
      SECRET_KEY: dev-secret-key-change-in-production
      CORS_ORIGINS: '["http://localhost:3000","http://localhost:8000","chrome-extension://*"]'
      
      # Rate Limiting
      RATE_LIMIT_PER_MINUTE: 60
      RATE_LIMIT_PER_HOUR: 1000
      
      # Monitoring
      ENABLE_METRICS: "true"
      LOG_LEVEL: INFO
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: development
      SENTRY_TRACES_SAMPLE_RATE: 0.1
      
      # Performance
      SLOW_REQUEST_THRESHOLD: 1.0
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for hot reload in development
      - .:/app
      # Preserve the .venv from the Docker image
      - /app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - job_copilot_network
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        uv run alembic upgrade head &&
        echo 'Starting FastAPI server...' &&
        uv run uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

networks:
  job_copilot_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
